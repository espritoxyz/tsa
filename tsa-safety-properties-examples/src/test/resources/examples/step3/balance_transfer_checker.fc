#include "../../imports/stdlib.fc";
#include "../../imports/tsa_functions.fc";
#include "op-codes.fc";

global int value;

() on_internal_message_send(int balance, int msg_value, cell in_msg_full, slice msg_body, int input_id) impure method_id {
    ;; ensure the initial message is not bounced
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    tsa_assert_not(flags & 1);

    ;; ensure that we perform a [transfer] operation
    slice body_copy = msg_body;
    int op = body_copy~load_uint(32);
    tsa_assert(op == op::transfer);

    ;; ensure the transferred value has reasonable limits
    value = body_copy~load_uint(32);
    ;; save this symbolic value by the index -1 to retrieve its concrete value in the result
    tsa_fetch_value(value, -1);
    ;; do not transfer zero money
    tsa_assert(value >= 100);
    tsa_assert(value <= 1000000000);

    ;; ensure that the message body contains a target address
    slice target = body_copy~load_msg_addr();
    tsa_fetch_value(target, 0);
}

() recv_internal() impure {
    tsa_forbid_failures();

    ;; get the initial balances of the two accounts â€“ call the `load_balance` methods with id -42 for both contracts 1 and 2 (id 0 is used for the checker)
    int first_initial_balance = tsa_call_1_0(1, -42);
    tsa_fetch_value(first_initial_balance, 1);
    int second_initial_balance = tsa_call_1_0(2, -42);
    tsa_fetch_value(second_initial_balance, 2);

    ;; ensure we have correct balances and cannot get overflows
    tsa_assert(first_initial_balance >= 0);
    tsa_assert(first_initial_balance <= 1000000000);
    tsa_assert(second_initial_balance >= 0);
    tsa_assert(second_initial_balance <= 1000000000);

    ;; send a message with a [transfer] operation
    tsa_send_internal_message(1, 0);

    ;; get the new balances of the two accounts
    int first_new_balance = tsa_call_1_0(1, -42);
    tsa_fetch_value(first_new_balance, 11);
    int second_new_balance = tsa_call_1_0(2, -42);
    tsa_fetch_value(second_new_balance, 22);

    tsa_fetch_value(value, 1000);

    tsa_allow_failures();

    ;; check that the balance of the first account has decreased by value
    throw_if(256, first_initial_balance - value != first_new_balance);

    ;; check that the balance of the second account has increased by value
    throw_if(257, second_initial_balance + value != second_new_balance);
}
