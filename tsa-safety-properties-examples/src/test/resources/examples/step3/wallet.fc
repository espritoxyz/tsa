#include "../../imports/stdlib.fc";
#include "op-codes.fc";

int load_balance() inline method_id(-42) {
    var ds = get_data().begin_parse();

    return ds~load_uint(32);
}

() update_balance(int new_balance) impure inline method_id(-422) {
    var new_data = begin_cell().store_uint(new_balance, 32).end_cell();

    set_data(new_data);
}

{-
  addr_std$10 anycast:(Maybe Anycast)
   workchain_id:int8 address:bits256  = MsgAddressInt;
-}
slice calc_address(cell state_init) inline {
    return begin_cell().store_uint(4, 3) ;; 0x100 : $10 + anycast (Maybe = 0)
        .store_int(0, 8)
        .store_uint(
            cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

builder store_msgbody_prefix_ref(builder b, cell ref) inline {
    return b.store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1).store_ref(ref);
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int value = in_msg_body~load_uint(32);

    if (op == op::transfer) {
        slice target = in_msg_body~load_msg_addr();

        ;; create a message that will decrease the balance of the target account
        var msg_body = begin_cell()
            .store_uint(op::receive, 32)
            .store_uint(value, 32)
            .store_slice(my_address())
            .end_cell();
        var msg = begin_cell()
            .store_uint(msg_flag::bounceable, 6)
            .store_slice(target)
            .store_grams(0)
            .store_msgbody_prefix_ref(msg_body);

        ;; decrease own balance
        int balance = load_balance();
        balance -= value;
        update_balance(balance);

        return send_raw_message(msg.end_cell(), 64);
    }

    if (op == op::receive) {
        slice sender = in_msg_body~load_msg_addr();

        if (equal_slice_bits(sender, my_address())) {
            ;; ignore receiving money from self
            return ();
        }

        ;; receive message increases the balance by the transferred value
        int balance = load_balance();
        balance += value;
        update_balance(balance);

        return ();
    }

    ;; unknown operation
    throw(error::unknown_action);
}
