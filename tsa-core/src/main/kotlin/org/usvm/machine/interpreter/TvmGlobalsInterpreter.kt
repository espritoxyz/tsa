package org.usvm.machine.interpreter

import org.ton.bytecode.TvmAppGlobalGetglobInst
import org.ton.bytecode.TvmAppGlobalGetglobvarInst
import org.ton.bytecode.TvmAppGlobalInst
import org.ton.bytecode.TvmAppGlobalSetglobInst
import org.ton.bytecode.TvmAppGlobalSetglobvarInst
import org.usvm.machine.TvmContext
import org.usvm.machine.TvmStepScopeManager
import org.usvm.machine.state.consumeDefaultGas
import org.usvm.machine.state.consumeGas
import org.usvm.machine.state.getGlobalVariable
import org.usvm.machine.state.newStmt
import org.usvm.machine.state.nextStmt
import org.usvm.machine.state.setGlobalVariable
import org.usvm.machine.state.takeLastIntOrNull
import org.usvm.machine.state.toStackEntry
import org.usvm.utils.intValueOrNull

class TvmGlobalsInterpreter(
    private val ctx: TvmContext,
) {
    // TODO these instructions are used in bytecode generated by Tact, but there are very nontrivial
    fun visitGlobalInst(
        scope: TvmStepScopeManager,
        stmt: TvmAppGlobalInst,
    ) {
        when (stmt) {
            is TvmAppGlobalGetglobInst -> {
                scope.consumeDefaultGas(stmt)

                val index = stmt.k
                require(index in 1..31) {
                    "Unexpected global variable with index $index"
                }

                scope.doWithState {
                    val value = getGlobalVariable(index, stack)
                    stack.addStackEntry(value.toStackEntry())
                }
            }
            is TvmAppGlobalGetglobvarInst -> {
                scope.consumeDefaultGas(stmt)

                scope.doWithState {
                    val index =
                        takeLastIntOrNull()?.intValueOrNull
                            ?: TODO("Get global variable with symbolic index")
                    val value = getGlobalVariable(index, stack)
                    stack.addStackEntry(value.toStackEntry())
                }
            }
            is TvmAppGlobalSetglobInst -> {
                // TODO complex gas 26 + |c7|
                scope.doWithState { consumeGas(26) }

                val index = stmt.k
                require(index in 1..31) {
                    "Unexpected global variable with index $index"
                }

                scope.doWithState {
                    val value = stack.takeLastEntry()

                    setGlobalVariable(index, value)
                }
            }
            is TvmAppGlobalSetglobvarInst -> {
                // TODO complex gas 26 + |c7|
                scope.doWithState { consumeGas(26) }

                scope.doWithState {
                    val index =
                        takeLastIntOrNull()?.intValueOrNull
                            ?: TODO("Set global variable with symbolic index")
                    val value = stack.takeLastEntry()

                    setGlobalVariable(index, value)
                }
            }
        }

        scope.doWithState { newStmt(stmt.nextStmt()) }
    }
}
