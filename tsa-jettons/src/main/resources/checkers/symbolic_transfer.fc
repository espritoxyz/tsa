#include "../imports/stdlib.fc";
#include "../imports/tsa_functions.fc";

;; constants and format from here: https://github.com/ston-fi/sdk/blob/main/src/contracts/dex/v2_1/router/BaseRouterV2_1.ts

const int GAS_AMOUNT = 300000000;
const int FWD_GAS_AMOUNT = 240000000;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice msg_body) impure {
    tsa_forbid_failures();

    ;; some sanity checks
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    tsa_assert_not((flags & 1) | (flags & 8));

    slice sender = cs~load_msg_addr();
    slice dest = cs~load_msg_addr();

    ;; assert that sender address is normal
    tsa_assert(slice_bits(sender) == 267);
    (_, int sender_prefix) = sender.load_uint(11);
    tsa_assert(sender_prefix == 1024);

    ;; assert that dest address is normal
    tsa_assert(slice_bits(dest) == 267);
    (_, int dest_prefix) = dest.load_uint(11);
    tsa_assert(dest_prefix == 1024);

    int value = cs~load_grams();
    tsa_assert(msg_value == value);
    tsa_assert(msg_value == GAS_AMOUNT);

    cs~skip_bits(1); ;; skip extracurrency collection

    ;; assume that fees are zero
    int ihr_fee = cs~load_grams();
    int fwd_fee = cs~load_grams();
    tsa_assert(ihr_fee + fwd_fee == 0);

    ;; get wallet data
    (int total_supply, slice owner_address, slice master_address, _) = tsa_call_4_0(1, 97026);

    ;; assert that master address is normal
    tsa_assert(slice_bits(master_address) == 267);
    (_, int master_prefix) = master_address.load_uint(11);
    tsa_assert(master_prefix == 1024);

    ;; assert that message is from owner
    tsa_assert(equal_slice_bits(sender, owner_address));

    ;; assert that we perform [transfer]
    slice body_copy = msg_body;
    int op = body_copy~load_uint(32);
    tsa_assert(op == 0xf8a7ea5);

    body_copy~load_uint(64);  ;; skip query_id

    int amout = body_copy~load_grams();
    tsa_assert(amout <= total_supply);
    tsa_assert(amout > 0);

    body_copy~load_msg_addr(); ;; skip dest
    body_copy~load_msg_addr(); ;; skip resp_dest
    body_copy~load_int(1); ;; skip custom_payload

    int fwd_amount = body_copy~load_grams();
    tsa_assert(fwd_amount == FWD_GAS_AMOUNT);

    ;; assert that forward_payload is given
    int maybe_bit = body_copy~load_uint(1);
    tsa_assert(maybe_bit != 0);

    tsa_allow_failures();

    ;; call recv_internal from given jetton-wallet
    tsa_call_0_4(my_balance, msg_value, in_msg_full, msg_body, 1, 0);
}
