#include "../imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice msg_body) impure {
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        int prefix = msg_body~load_uint(32); 
        throw_if(257, prefix != 0xFFFFFFFF); ;; we should catch the standard prefix

        int op = msg_body~load_uint(32);
        throw_if(258, op != 200); ;; we should catch the same opcode

        int the_rest = msg_body~load_uint(224); ;; the rest should be filled of zeros
        throw_if(259, the_rest != 0);
 
        throw_if(260, msg_body.slice_empty?()); ;; and this should be the end of the slice
    }

    int op = msg_body~load_uint(32);
    if (op == 100) {
        cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice("EQD9ONCYURxDAV4CzRhc_Kw77_-omip_INZUQGOKlHW523p1"a) ;; the address of the recipient contract
        .store_coins(100000000)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message headers
        .store_uint(200, 32)
        .store_uint(225, 1) ;; fill the rest 224 bits of bounced message with zeros and add 1 at the end.
        .end_cell();    

        send_raw_message(msg, 0);

        return();
    }
}
