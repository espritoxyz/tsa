#include "../imports/stdlib.fc";

() main() {
    return ();
}

;; TODO add tests with (-1) pivot to check for signed stuff
() check_same_result_when_same_input_get_next(slice in_msg) impure method_id (1) {
    cell some_cell = in_msg~load_dict();
    (int i1, _, int found1) = some_cell.udict_get_next?(64, 1);
    throw_if(300, ~ found1);
    (int i2, _, int found2) = some_cell.udict_get_next?(64, 1);
    throw_if(400, ~ found2);
    throw_if(401, found1 & found2 & i1 != i2);
    throw(500);
}

() check_same_result_when_same_input_get_prev(slice in_msg) impure method_id (2) {
    cell some_cell = in_msg~load_dict();
    (int i1, _, int found1) = some_cell.udict_get_prev?(64, 1);
    throw_if(300, ~ found1);
    (int i2, _, int found2) = some_cell.udict_get_prev?(64, 1);
    throw_if(400, ~ found2);
    throw_if(401, found1 & found2 & i1 != i2);
    throw(500);
}

() check_next_prev_is_id(slice in_msg) impure method_id (3) {
    cell some_cell = in_msg~load_dict();
    (int initial, _, int found1) = some_cell.udict_get_next?(64, 1);
    throw_if(301, ~ found1);
    (int next, _, int found2) = some_cell.udict_get_next?(64, initial);
    throw_if(302, ~ found2);
    (int nextprev, _, int found3) = some_cell.udict_get_prev?(64, next);
    throw_if(303, ~ found3);
    throw_if(400, nextprev != initial);
    throw(500);
}

() check_get_max_returns_the_largest_key(slice in_msg, int lower_bound) impure method_id (4) {
    cell some_cell = in_msg~load_dict();
    (int some_key, _, int found1) = some_cell.udict_get_next?(64, lower_bound);
    throw_if(300, ~ found1);
    (int max_key, _, int found2) = some_cell.udict_get_max?(64);
    throw_if(400, ~ found2); ;; unreachable, as it is not empty
    throw_if(401, max_key < some_key);
    throw(500); ;; successfull execution
}

() check_get_max_returns_the_largest_key_reordered(slice in_msg, int lower_bound) impure method_id (5) {
    cell some_cell = in_msg~load_dict();
    (int max_key, _, int found1) = some_cell.idict_get_max?(64);
    throw_if(300, ~ found1);
    (int some_key, _, int found2) = some_cell.idict_get_next?(64, lower_bound);
    throw_if(301, ~ found2);
    throw_if(400, max_key < some_key);
    throw(500); ;; successfull execution
}

() check_get_next_and_get_consistency(slice in_msg) impure method_id (6) {
    cell some_cell = in_msg~load_dict();
    (int some_key, slice some_value, int found1) = some_cell.udict_get_next?(64, 1);
    throw_if(300, ~ found1);
    (slice another_value, int found2) = some_cell.udict_get?(64, some_key);
    throw_if(400, ~ found2);
    throw_if(401, slice_hash(some_value) != slice_hash(another_value));
    throw(500); ;; successfull execution
}

() check_get_next_and_get_consistency_2(slice in_msg) impure method_id (7) {
    cell some_cell = in_msg~load_dict();
    (slice some_value, int found1) = some_cell.udict_get?(64, 1);
    throw_if(300, ~ found1);
    (int some_key, slice another_value, int found2) = some_cell.udict_get_next?(64, 0);
    throw_if(400, ~ found2);
    throw_if(401, ~ some_key == 0);
    throw_if(402, ~ slice_hash(some_value) != ~ slice_hash(another_value));
    throw(500); ;; successfull execution
}

() check_same_result_when_same_input_get_next_notfound(slice in_msg) impure method_id (8) {
    cell some_cell = in_msg~load_dict();
    (_, _, int found0) = some_cell.udict_get_prev?(64, 1);
    throw_if(300, ~ found0); ;; assert not empty
    (_, _, int found1) = some_cell.udict_get_next?(64, 2);
    throw_if(301, found1);
    (_, _, int found2) = some_cell.udict_get_next?(64, 2);
    throw_if(400, found2);
    throw(500);
}

() check_get_is_id(slice in_msg) impure method_id (9) {
    cell some_cell = in_msg~load_dict();
    (slice value1, int found1) = some_cell.udict_get?(64, 2);
    throw_if(300, ~ found1);
    (slice value2, int found2) = some_cell.udict_get?(64, 2);
    throw_if(400, ~ found2);
    throw_if(401, slice_hash(value1) != slice_hash(value2));
    throw(500);
}

() check_get_max_returns_none_implies_empty(slice in_msg, int lower_bound) impure method_id (10) {
    cell some_cell = in_msg~load_dict();
    (_, _, int found1) = some_cell.udict_get_max?(64);
    throw_if(300, found1); ;; throw if not empty
    (_, _, int found2) = some_cell.udict_get_next?(64, lower_bound);
    throw_if(400, found2);
    throw(500); ;; successfull execution
}

() check_dict_set_works(slice in_msg) impure method_id (11) {
    cell some_cell = in_msg~load_dict();
    slice empty_slice = begin_cell().end_cell().begin_parse();
    cell set_dict = udict_set(some_cell, 64, 37, empty_slice);
    (_, int found) = set_dict.udict_get?(64, 37);
    throw_if(400, ~ found);
    throw(500); ;; successfull execution
}

() check_dict_set_overrides_value(slice in_msg) impure method_id (12) {
    slice empty_slice = begin_cell().end_cell().begin_parse();
    cell some_cell = in_msg~load_dict();
    (_, int found) = some_cell.udict_get?(64, 37);
    throw_unless(300, ~ found); ;; assert does not exist

    cell set_dict = udict_set(some_cell, 64, 37, empty_slice);
    (_, int found1) = set_dict.udict_get?(64, 37);
    throw_if(400, ~ found1);
    throw(500); ;; successfull execution
}

() check_dict_delete_works(slice in_msg) impure method_id (13) {
    cell some_cell = in_msg~load_dict();
    (cell rem_dict, _) = udict_delete?(some_cell, 64, 37);
    (_, int found) = rem_dict.udict_get?(64, 37);
    throw_if(400, found);
    throw(500); ;; successfull execution
}

() check_dict_delete_overrides_value(slice in_msg) impure method_id (14) {
    slice empty_slice = begin_cell().end_cell().begin_parse();
    cell some_cell = in_msg~load_dict();
    (_, int found) = some_cell.udict_get?(64, 37);
    throw_unless(300, ~ found); ;; assert exists

    cell set_dict = udict_set(some_cell, 64, 37, empty_slice);
    (_, int found1) = set_dict.udict_get?(64, 37);
    throw_if(400, ~ found1);
    throw(500); ;; successfull execution
}
